machine ( MachineType:SquireCache, "eFPGA-side Squire Cache" )
  : Sequencer         * sequencer;
    CacheMemory       * cache;
    MessageBuffer     * mandatoryQueue;
    MessageBuffer     * requestToProxy,    network="To";
    MessageBuffer     * responseFromProxy, network="From";

    // -- parameters --
    Cycles  latency := 1;   // time to send request to Proxy
{
  // ========================================================================
  // -- States --------------------------------------------------------------
  // ========================================================================
  state_declaration ( State, desc="Cache States", default="SquireCache_State_I" )
  {
    // Base States
    I,  AccessPermission:Invalid,     desc="Unused entry";
    V,  AccessPermission:Read_Write,  desc="Valid, clean cacheline";

    // Transient States
    //  -- IV: Squire Cache uses allocation-on-fill, so there's not IV state.
  }

  // ========================================================================
  // -- Events --------------------------------------------------------------
  // ========================================================================
  enumeration ( Event, desc="Cache events" )
  {
    // From the Knight (eFPGA)
    Ld,         desc="Load from the Knight";
    St,         desc="Store from the Knight";
    LdHitTBE,   desc="Load hit in TBE";
    LdStallTBE, desc="Load hit int and stalled by TBE";

    // From the Proxy
    LdAck,      desc="Load ack from the Proxy";
    StAck,      desc="Store ack from the Proxy";
    StInv,      desc="Store ack with invalidation from the Proxy"; 
    Inv,        desc="Invalidation from the Proxy";
  }

  // ========================================================================
  // -- Structures ----------------------------------------------------------
  // ========================================================================
  // -- Cache Entry --
  structure ( CacheEntry, desc="Cache entry", interface="AbstractCacheEntry" )
  {
    State       state,  desc="Cache state";
    DataBlock   data,   desc="Data in the block";
  }

  // -- TBE Table --
  structure ( TBE, desc="Transaction Buffer Entry" )
  {
    Addr        addr,                     desc="Physical address of the cache line";
    DataBlock   data,                     desc="Buffered write data";
    WriteMask   mask,                     desc="Byte mask of buffered write";
    bool pendingLd,     default="false",  desc="Is there a pending load?";
    int numPendingSts,  default="0",      desc="Number of un-acked write-thrus";
  }

  structure ( TBETable, external="yes" )
  {
    TBE lookup(Addr);
    void allocate(Addr);
    void deallocate(Addr);
    bool isPresent(Addr);
  }

  TBETable TBEs, template="<TBE>", constructor="m_number_of_TBEs";

  // ========================================================================
  // -- Inherited Methods from AbstractController ---------------------------
  // ========================================================================
  Tick clockEdge ();
  Cycles ticksToCycles(Tick t);
  void set_cache_entry (AbstractCacheEntry b);
  void set_tbe (TBE b);
  void unset_tbe ();
  void wakeUpAllBuffers (Addr a);
  void profileMsgDelay(int virtualNetworkType, Cycles c);

  // ========================================================================
  // -- Methods -------------------------------------------------------------
  // ========================================================================
  CacheEntry getCacheEntry (Addr addr), return_by_pointer="yes" {
    return static_cast (CacheEntry, "pointer", cache.lookup (addr));
  }

  bool missInTBE (int offset, int size, TBE tbe) {
    if ( is_invalid (tbe) ) {
      return true;
    } else if ( tbe.pendingLd ) {
      return false;
    } else if ( tbe.numPendingSts > 0
                && tbe.mask.firstBitSet (true, offset) < offset + size )
    {
      return false;
    } else {
      return true;
    }
  }

  bool hitInTBE (int offset, int size, TBE tbe) {
    // make sure missInTBE -> false before calling this
    return !tbe.pendingLd && tbe.mask.count (offset) >= size;
  }

  AccessPermission getAccessPermission (Addr addr) {
    CacheEntry entry := getCacheEntry (addr);
    if (is_valid (entry)) {
      return SquireCache_State_to_permission (entry.state);
    } else {
      return AccessPermission:NotPresent;
    }
  }

  void functionalRead (Addr addr, Packet * pkt) {
    error ( "Functional read unimpl for Squire Cache." );
  }

  void functionalWrite (Addr addr, Packet * pkt) {
    error ( "Functional write unimpl for Squire Cache." );
  }

  void setAccessPermission (CacheEntry cache_entry, Addr addr, State state) {
    if (is_valid (cache_entry)) {
      cache_entry.changePermission (SquireCache_State_to_permission (state));
    }
  }

  // ========================================================================
  // -- Out Ports -----------------------------------------------------------
  // ========================================================================
  out_port ( request_out, SquireMsg, requestToProxy );

  // ========================================================================
  // -- In Ports ------------------------------------------------------------
  // ========================================================================
  // -- Response from Proxy --
  in_port ( response_in, ProxyMsg, responseFromProxy ) {
    if (response_in.isReady (clockEdge ())) {
      peek (response_in, ProxyMsg) {
        CacheEntry  entry := getCacheEntry (in_msg.addr);
        TBE         tbe   := TBEs [in_msg.addr];

        if (in_msg.type == ProxyMsgType:DATA) {
          assert (tbe.pendingLd);
          trigger (Event:LdAck, in_msg.addr, entry, tbe);
        } else if (in_msg.type == ProxyMsgType:WT_ACK) {
          assert (tbe.numPendingSts > 0);
          trigger (Event:StAck, in_msg.addr, entry, tbe);
        } else if (in_msg.type == ProxyMsgType:WT_INV) {
          assert (tbe.numPendingSts > 0);
          trigger (Event:StInv, in_msg.addr, entry, tbe);
        } else {
          assert (in_msg.type == ProxyMsgType:INV);
          trigger (Event:Inv, in_msg.addr, entry, tbe);
        }
      }
    }
  }

  // -- Request from Sequencer --
  in_port ( request_in, RubyRequest, mandatoryQueue ) {
    if (request_in.isReady (clockEdge ())) {
      peek (request_in, RubyRequest) {
        CacheEntry  entry := getCacheEntry (in_msg.LineAddress);
        TBE         tbe   := TBEs [in_msg.LineAddress];

        if (in_msg.Type == RubyRequestType:LD) {
          // check if the TBE has up-to-date write data
          int offset := getOffset (in_msg.PhysicalAddress);
          if (missInTBE ( offset, in_msg.size, tbe )) {
            // handle it in the cache entry
            trigger (Event:Ld, in_msg.LineAddress, entry, tbe);
          } else if (hitInTBE ( offset, in_msg.size, tbe )) {
            trigger (Event:LdStallTBE, in_msg.LineAddress, entry, tbe);
          } else {
            trigger (Event:LdHitTBE, in_msg.LineAddress, entry, tbe);
          }
        } else {
          assert (in_msg.Type == RubyRequestType:ST);
          trigger (Event:St, in_msg.LineAddress, entry, tbe);
        }
      }
    }
  }

  // ========================================================================
  // -- Actions --------------------------------------------------------------
  // ========================================================================
  action ( at_allocTBE, "at", desc="Allocate TBE" ) {
    if (is_invalid (tbe)) {
      check_allocate (TBEs);
      TBEs.allocate (address);
      set_tbe (TBEs [address]);
    }
  }

  action ( sr_sendLdReqToProxy, "sr", desc="Send load request to Proxy" ) {
    assert (is_valid (tbe) && !tbe.pendingLd);
    tbe.pendingLd := true;

    peek (request_in, RubyRequest) {
      enqueue (request_out, SquireMsg, latency) {
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.type        := SquireMsgType:RD;
        out_msg.addr        := address;
      }
    }
  }

  action ( pm_profMiss, "pm", desc="Profile cache miss" ) {
    cache.profileDemandMiss ();
  }

  action ( dm_deqMandatory, "dm", desc="Dequeue from mandatory queue" ) {
    request_in.dequeue (clockEdge ());
  }

  action ( lh_ldHit, "lh", desc="Load hit in cache" ) {
    assert (is_valid (cache_entry));
    cache.setMRU (cache_entry);
    sequencer.readCallback (address, cache_entry.data);
  }

  action ( ph_profHit, "ph", desc="Profile cache hit" ) {
    cache.profileDemandHit ();
  }

  action ( wt_writeThru, "wt", desc="Write through to Proxy" ) {
    assert (is_valid (tbe));

    peek (request_in, RubyRequest) {
      sequencer.writeCallback (address, in_msg.WTData);
      tbe.numPendingSts := tbe.numPendingSts + 1;
      tbe.data.copyPartial (in_msg.WTData, in_msg.writeMask);
      tbe.mask.orMask (in_msg.writeMask);

      enqueue (request_out, SquireMsg, latency) {
        out_msg.MessageSize := MessageSizeType:Data;
        out_msg.type        := SquireMsgType:ST;
        out_msg.addr        := address;
        out_msg.data        := in_msg.WTData;
        out_msg.mask        := in_msg.writeMask;
      }
    }
  }
  
  action ( ue_updateCacheEntry, "ue", desc="Apply store to cache entry" ) {
    assert (is_valid (cache_entry));

    peek (request_in, RubyRequest) {
      cache.setMRU (cache_entry);
      cache_entry.data.copyPartial (in_msg.WTData, in_msg.writeMask);
    }
  }

  action ( lt_ldHitTBE, "lt", desc="Load hit in TBE" ) {
    assert (is_valid (tbe));
    sequencer.readCallback (address, tbe.data);
  }

  action ( z_stallAndWaitMandatoryQueue, "z", desc="stall") {
    stall_and_wait ( request_in, address );
  }

  action ( au_allocAndUpdateCacheEntry, "au", desc="Allocate and update cache entry" ) {
    assert (is_invalid (cache_entry));

    if ( !cache.cacheAvail (address) ) {
      cache.deallocate (address);   // silent eviction
    }

    set_cache_entry (cache.allocate (address, new CacheEntry));

    peek (response_in, ProxyMsg) {
      cache_entry.data := in_msg.data;
    }
  }

  action ( fl_fillLd, "fl", desc="Load satisfied by line fill" ) {
    assert (is_valid (cache_entry));
    assert (is_valid (tbe));

    cache.setMRU (cache_entry);
    sequencer.readCallback (address, cache_entry.data, true);

    tbe.pendingLd := false;
    if ( tbe.numPendingSts == 0 ) {
      TBEs.deallocate (address);
      unset_tbe ();
    }
  }

  action ( dr_deqResponse, "dr", desc="Dequeue from response queue" ) {
    Tick delay := response_in.dequeue (clockEdge ());
    profileMsgDelay (0, ticksToCycles (delay));
  }

  action ( wd_wakeUpDependents, "wd", desc="Wake up stalling queues" ) {
    wakeUpAllBuffers (address);
  }

  action ( fs_fillSt, "fs", desc="Store acked" ) {
    assert (is_valid (tbe));
    tbe.numPendingSts := tbe.numPendingSts - 1;

    if ( tbe.numPendingSts == 0 ) {
      TBEs.deallocate (address);
      unset_tbe ();
    }
  }

  // ========================================================================
  // -- Transitions ---------------------------------------------------------
  // ========================================================================
  transition (I, Ld) {
    at_allocTBE;
    sr_sendLdReqToProxy;
    pm_profMiss;
    dm_deqMandatory;
  }

  transition (V, Ld) {
    lh_ldHit;
    ph_profHit;
    dm_deqMandatory;
  }

  transition (I, St) {
    at_allocTBE;
    wt_writeThru;
    pm_profMiss;
    dm_deqMandatory;
  }

  transition (V, St) {
    at_allocTBE;
    wt_writeThru;
    ue_updateCacheEntry;
    ph_profHit;
    dm_deqMandatory;
  }

  transition ({I, V}, LdHitTBE) {
    lt_ldHitTBE;
    ph_profHit;
    dm_deqMandatory;
  }

  transition ({I, V}, LdStallTBE) {
    ph_profMiss;
    z_stallAndWaitMandatoryQueue;
  }

  transition (I, LdAck, V) {
    au_allocAndUpdateCacheEntry;
    fl_fillLd;
    dr_deqResponse;
    wd_wakeUpDependents;
  }

  transition ({I, V}, StAck) {
    fs_fillSt;
    dr_deqResponse;
    wd_wakeUpDependents;
  }

  transition (I, StInv) {
    fs_fillSt;
    dr_deqResponse;
    wd_wakeUpDependents;
  }

  transition (V, StInv, I) {
    fs_fillSt;
    dr_deqResponse;
    wd_wakeUpDependents;
  }

  transition ({V, I}, Inv, I) {
    dr_deqResponse;
  }
}
